#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}=== Testing Orders API ===${NC}\n"

# Configuration from Terraform outputs
# Run these commands to get the values:
# COGNITO_DOMAIN=$(cd terraform && terraform output -raw cognito_user_pool_domain)
# CLIENT_ID=$(cd terraform && terraform output -raw cognito_client_id)
# CLIENT_SECRET=$(cd terraform && terraform output -raw cognito_client_secret)
# API_ENDPOINT=$(cd terraform && terraform output -raw api_endpoint)
# API_KEY=$(cd terraform && terraform output -json api_key_values | jq -r '.["demo-client"]')

COGNITO_DOMAIN="${COGNITO_DOMAIN:-YOUR_COGNITO_DOMAIN}"
CLIENT_ID="${CLIENT_ID:-YOUR_CLIENT_ID}"
CLIENT_SECRET="${CLIENT_SECRET:-YOUR_CLIENT_SECRET}"
REGION="${REGION:-us-east-1}"
API_ENDPOINT="${API_ENDPOINT:-YOUR_API_ENDPOINT}"
API_KEY="${API_KEY:-YOUR_API_KEY}"

# Step 1: Get Access Token
echo -e "${YELLOW}Step 1: Getting access token from Cognito...${NC}"
TOKEN_RESPONSE=$(curl -s -X POST "https://${COGNITO_DOMAIN}.auth.${REGION}.amazoncognito.com/oauth2/token" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -u "${CLIENT_ID}:${CLIENT_SECRET}" \
  -d "grant_type=client_credentials")

ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')

if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
  echo -e "${RED}Failed to get access token!${NC}"
  echo "Response: $TOKEN_RESPONSE"
  exit 1
fi

echo -e "${GREEN}✓ Access token obtained${NC}\n"

# Step 2: Test Health Endpoint
echo -e "${YELLOW}Step 2: Testing /health endpoint...${NC}"
HEALTH_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "${API_ENDPOINT}/health" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

HTTP_STATUS=$(echo "$HEALTH_RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
BODY=$(echo "$HEALTH_RESPONSE" | sed '/HTTP_STATUS/d')

echo "Status: $HTTP_STATUS"
echo "Response: $BODY"

if [ "$HTTP_STATUS" = "200" ]; then
  echo -e "${GREEN}✓ Health check passed${NC}\n"
else
  echo -e "${RED}✗ Health check failed${NC}\n"
fi

# Step 3: Test Get All Orders
echo -e "${YELLOW}Step 3: Testing GET /orders?customerId=CUST12345...${NC}"
ORDERS_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "${API_ENDPOINT}/orders?customerId=CUST12345" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

HTTP_STATUS=$(echo "$ORDERS_RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
BODY=$(echo "$ORDERS_RESPONSE" | sed '/HTTP_STATUS/d')

echo "Status: $HTTP_STATUS"
echo "Response: $BODY" | jq '.' 2>/dev/null || echo "$BODY"

if [ "$HTTP_STATUS" = "200" ]; then
  echo -e "${GREEN}✓ Get all orders passed${NC}\n"
else
  echo -e "${RED}✗ Get all orders failed${NC}\n"
fi

# Step 4: Test Get Specific Order
echo -e "${YELLOW}Step 4: Testing GET /orders/ORD00001...${NC}"
ORDER_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "${API_ENDPOINT}/orders/ORD00001" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

HTTP_STATUS=$(echo "$ORDER_RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
BODY=$(echo "$ORDER_RESPONSE" | sed '/HTTP_STATUS/d')

echo "Status: $HTTP_STATUS"
echo "Response: $BODY" | jq '.' 2>/dev/null || echo "$BODY"

if [ "$HTTP_STATUS" = "200" ]; then
  echo -e "${GREEN}✓ Get order by ID passed${NC}\n"
else
  echo -e "${RED}✗ Get order by ID failed${NC}\n"
fi

# Step 5: Test Invalid Order ID
echo -e "${YELLOW}Step 5: Testing GET /orders/INVALID (should return 404)...${NC}"
NOTFOUND_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X GET "${API_ENDPOINT}/orders/INVALID" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

HTTP_STATUS=$(echo "$NOTFOUND_RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
BODY=$(echo "$NOTFOUND_RESPONSE" | sed '/HTTP_STATUS/d')

echo "Status: $HTTP_STATUS"
echo "Response: $BODY"

if [ "$HTTP_STATUS" = "404" ]; then
  echo -e "${GREEN}✓ 404 response correct${NC}\n"
else
  echo -e "${RED}✗ Expected 404, got $HTTP_STATUS${NC}\n"
fi

echo -e "${YELLOW}=== Testing Complete ===${NC}"
