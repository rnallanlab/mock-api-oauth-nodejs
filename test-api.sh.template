#!/bin/bash

# =============================================================================
# Orders API Test Suite Template
# =============================================================================
#
# SETUP INSTRUCTIONS:
# 1. Copy this file: cp test-api.sh.template test-api.sh
# 2. Get credentials from Terraform:
#    cd terraform
#    terraform output -raw cognito_user_pool_domain
#    terraform output -raw cognito_client_id
#    terraform output -raw cognito_client_secret
#    terraform output -raw api_endpoint
#    terraform output -json api_key_values | jq -r '.["demo-client"]'
# 3. Replace YOUR_* placeholders below with actual values
# 4. Run: ./test-api.sh
#
# =============================================================================

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# API Configuration - REPLACE THESE VALUES
API_ENDPOINT="${API_ENDPOINT:-YOUR_API_ENDPOINT}"
COGNITO_DOMAIN="${COGNITO_DOMAIN:-YOUR_COGNITO_DOMAIN}"
COGNITO_REGION="${COGNITO_REGION:-us-east-1}"
CLIENT_ID="${CLIENT_ID:-YOUR_CLIENT_ID}"
CLIENT_SECRET="${CLIENT_SECRET:-YOUR_CLIENT_SECRET}"
API_KEY="${API_KEY:-YOUR_API_KEY}"

# Token URL
TOKEN_URL="https://${COGNITO_DOMAIN}.auth.${COGNITO_REGION}.amazoncognito.com/oauth2/token"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}Orders API Test Suite${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Test 1: Health Check (No Auth)
echo -e "${YELLOW}Test 1: Health Check (No Auth)${NC}"
echo -e "GET ${API_ENDPOINT}/health"
echo ""
HEALTH_RESPONSE=$(curl -s "${API_ENDPOINT}/health")
if echo "$HEALTH_RESPONSE" | jq -e '.status == "healthy"' > /dev/null 2>&1; then
    echo -e "${GREEN}✓ PASSED${NC}"
    echo "$HEALTH_RESPONSE" | jq
else
    echo -e "${RED}✗ FAILED${NC}"
    echo "$HEALTH_RESPONSE"
fi
echo ""

# Test 2: Get OAuth Token
echo -e "${YELLOW}Test 2: Get OAuth Token${NC}"
echo -e "POST ${TOKEN_URL}"
echo ""
TOKEN_RESPONSE=$(curl -s -X POST \
  "${TOKEN_URL}" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -u "${CLIENT_ID}:${CLIENT_SECRET}" \
  -d "grant_type=client_credentials&scope=orders-api/read")

ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')

if [ "$ACCESS_TOKEN" != "null" ] && [ -n "$ACCESS_TOKEN" ]; then
    echo -e "${GREEN}✓ PASSED${NC}"
    echo "Token expires in: $(echo "$TOKEN_RESPONSE" | jq -r '.expires_in') seconds"
    echo "Token type: $(echo "$TOKEN_RESPONSE" | jq -r '.token_type')"
else
    echo -e "${RED}✗ FAILED${NC}"
    echo "$TOKEN_RESPONSE" | jq
    exit 1
fi
echo ""

# Test 3: List Orders with Pagination
echo -e "${YELLOW}Test 3: List Orders (With Auth + API Key)${NC}"
echo -e "GET ${API_ENDPOINT}/orders?customerId=CUST12345&limit=3"
echo ""
ORDERS_RESPONSE=$(curl -s "${API_ENDPOINT}/orders?customerId=CUST12345&limit=3" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

if echo "$ORDERS_RESPONSE" | jq -e '.orders' > /dev/null 2>&1; then
    echo -e "${GREEN}✓ PASSED${NC}"
    TOTAL_COUNT=$(echo "$ORDERS_RESPONSE" | jq -r '.totalCount')
    RETURNED=$(echo "$ORDERS_RESPONSE" | jq '.orders | length')
    echo "Total orders: ${TOTAL_COUNT}"
    echo "Returned: ${RETURNED}"
    echo ""
    echo "Sample order:"
    echo "$ORDERS_RESPONSE" | jq '.orders[0]'
else
    echo -e "${RED}✗ FAILED${NC}"
    echo "$ORDERS_RESPONSE" | jq
fi
echo ""

# Test 4: Get Order by ID
echo -e "${YELLOW}Test 4: Get Order by ID${NC}"
echo -e "GET ${API_ENDPOINT}/orders/ORD00001"
echo ""
ORDER_RESPONSE=$(curl -s "${API_ENDPOINT}/orders/ORD00001" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

if echo "$ORDER_RESPONSE" | jq -e '.orderId == "ORD00001"' > /dev/null 2>&1; then
    echo -e "${GREEN}✓ PASSED${NC}"
    echo "$ORDER_RESPONSE" | jq
else
    echo -e "${RED}✗ FAILED${NC}"
    echo "$ORDER_RESPONSE" | jq
fi
echo ""

# Test 5: Date Range Filtering
echo -e "${YELLOW}Test 5: Date Range Filtering${NC}"
echo -e "GET ${API_ENDPOINT}/orders?customerId=CUST12345&startDate=2025-05-01&endDate=2025-10-31"
echo ""
DATE_RESPONSE=$(curl -s "${API_ENDPOINT}/orders?customerId=CUST12345&startDate=2025-05-01&endDate=2025-10-31" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

if echo "$DATE_RESPONSE" | jq -e '.orders' > /dev/null 2>&1; then
    echo -e "${GREEN}✓ PASSED${NC}"
    FILTERED_COUNT=$(echo "$DATE_RESPONSE" | jq -r '.totalCount')
    echo "Orders in date range: ${FILTERED_COUNT}"
    echo ""
    echo "Orders:"
    echo "$DATE_RESPONSE" | jq '.orders[] | {orderId, orderDate, totalAmount}'
else
    echo -e "${RED}✗ FAILED${NC}"
    echo "$DATE_RESPONSE" | jq
fi
echo ""

# Test 6: Invalid Order ID (404 Test)
echo -e "${YELLOW}Test 6: Error Handling - Invalid Order ID${NC}"
echo -e "GET ${API_ENDPOINT}/orders/INVALID999"
echo ""
ERROR_RESPONSE=$(curl -s "${API_ENDPOINT}/orders/INVALID999" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
  -H "x-api-key: ${API_KEY}")

if echo "$ERROR_RESPONSE" | jq -e '.error == "NotFound"' > /dev/null 2>&1; then
    echo -e "${GREEN}✓ PASSED${NC}"
    echo "Error correctly returned:"
    echo "$ERROR_RESPONSE" | jq
else
    echo -e "${RED}✗ FAILED - Expected 404 error${NC}"
    echo "$ERROR_RESPONSE" | jq
fi
echo ""

# Test 7: Missing API Key (401 Test)
echo -e "${YELLOW}Test 7: Error Handling - Missing API Key${NC}"
echo -e "GET ${API_ENDPOINT}/orders?customerId=CUST12345"
echo ""
NO_KEY_RESPONSE=$(curl -s "${API_ENDPOINT}/orders?customerId=CUST12345" \
  -H "Authorization: Bearer ${ACCESS_TOKEN}")

if echo "$NO_KEY_RESPONSE" | grep -q "Forbidden\|Unauthorized"; then
    echo -e "${GREEN}✓ PASSED${NC}"
    echo "API correctly rejected request without API key"
else
    echo -e "${RED}✗ FAILED - Should reject without API key${NC}"
    echo "$NO_KEY_RESPONSE"
fi
echo ""

# Summary
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}Test Suite Complete${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${GREEN}All critical tests passed!${NC}"
echo ""
echo "API Endpoint: ${API_ENDPOINT}"
echo "Documentation: See README.md"
echo ""
